_model: page_markdown
---
title: Turbodbc: Turbocharged database access for data scientists
---
head_extra:

<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@pyconde" />
<meta name="twitter:title" content="Michael König: Turbodbc: Turbocharged database access for data scientists" />
<meta name="twitter:description" content="Python&#39;s database API 2.0 is well suited for transactional database workflows, but not so much for column-heavy data science. This talk explains how the ODBC-based turbodbc database module extends this API with first-class, efficient support for familiar NumPy and Apache Arrow data structures." />
<meta name="twitter:image" content="https://de.pycon.org/files/logo.png" />
---
body:

# Turbodbc: Turbocharged database access for data scientists
<div class="avatar">
![](https://secure.gravatar.com/avatar/846b8ff6a0668d0f6cb2b66e6abc9720?s=500)
**[Michael König](https://tech.blue-yonder.com)** ([@turbodbc](http://twitter.com/turbodbc))


Michael is a senior software engineer at Blue Yonder GmbH. He holds a PhD in physics, practices test-driven development, and digs Clean Code in C++ and Python. In the last five years, he invested more money in table tennis gear than in smartphones.
</div>
## Abstract

*Tags:* numpy database python data-science analytics

Python's database API 2.0 is well suited for transactional database workflows, but not so much for column-heavy data science. This talk explains how the ODBC-based turbodbc database module extends this API with first-class, efficient support for familiar NumPy and Apache Arrow data structures.


## Description
This talk introduces the open source Python database module [turbodbc](https://github.com/blue-yonder/turbodbc). It uses standard ODBC drivers to connect with virtually any database and is a viable (and often faster) alternative to "native" Python drivers.

Briefly recounting the painful story of how data scientists previously used our analytics database, I explain why turbodbc was created and what distinguishes it from other ODBC modules. Sketching the flow of data from databases via drivers and Python modules to consumable Python objects, I motivate a few extensions to the [standard database API 2.0](https://www.python.org/dev/peps/pep-0249/) that turbodbc has made. These extensions heavily use NumPy arrays and Apache Arrow tables to provide data scientists with both familiar and efficient binary data structures they can further work on. I conclude my talk with benchmark results for a few databases.
