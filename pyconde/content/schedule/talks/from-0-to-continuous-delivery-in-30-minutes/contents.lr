_model: page_markdown
---
title: From 0 to Continuous Delivery in 30 minutes.
---
head_extra:

<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@pyconde" />
<meta name="twitter:title" content="David Wölfle: From 0 to Continuous Delivery in 30 minutes." />
<meta name="twitter:description" content="An introduction and hands on example how to start Continuous Delivery for python (or whatever) projects with conda and gitlab, which are open source, free to use, and if you wish even available as a cloud service." />
<meta name="twitter:image" content="https://de.pycon.org/files/logo.png" />
---
body:

# From 0 to Continuous Delivery in 30 minutes.
<div class="avatar">
![](https://secure.gravatar.com/avatar/7b8ecc173c50b8ba62868dc69fbe7068?s=500)
**[David Wölfle](https://www.weather-consult.com/)** 


Please find information to my person on https://www.linkedin.com/in/david-woelfle/
</div>
## Abstract

*Tags:* hands on continuous delivery devops python gitlab conda

An introduction and hands on example how to start Continuous Delivery for python (or whatever) projects with conda and gitlab, which are open source, free to use, and if you wish even available as a cloud service.


## Description
So, you wrote this neat software, which uses one or two cool 3rd party packages and now you have to get it running on your test or prod servers. Now you could check out your code and install the dependencies manually but that seems like a lot of wasted time, right? Shouldn't there be a more convenient way of doing this? 

Yes! And it's easier than you think! In this talk you'll learn how to build a Continuous Delivery pipeline for your python (or whatever) projects in 30 Minutes. 

In the beginning you'll get a quick introduction into the topic and the used tools, which are open source and free to use. For those who know a little about the subject: We will use conda (https://conda.io) to build the software package and for the dependency handling. GitLab.com will process the actual pipeline for us and Anaconda.com serves us with a package distribution channel.

After that it's "hands on" time. We will go step by step trough the process. Starting with the creation of a little dummy program. Then extending the dummy in such manner that it can be build into a package. Afterwards we will create the pipeline and finally do a demo deploy. And if the gods of conference internet are merciful, you see all this as a live demonstration. 
