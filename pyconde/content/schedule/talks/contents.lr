_model: page_markdown
---
title: Talks
---
body:


# [5 simple steps to create meaningful features from clickstream data (with Pandas)](./5-simple-steps-to-create-meaningful-features-from-clickstream-data-with-pandas/)
**Shir Meir Lador**

Predicting client financial behaviour is usually done by financial data sources - such as client financial history, bank and credit statements, etc. In this talk we will review a different type of data source for risk assessment - features engineered from clickstream data gathered by Mixpanel. 


# [A Summer of Foodsharing ](./a-summer-of-foodsharing/)
**Ines Dorian Gütt**

People talk a lot about diversity in tech. My team mate Marie and I have decided to give it a try and applied for a sponsored program this summer. Will it open us the doors to the world of software architecture, APIs and data processing?


# [An introduction to PyMC3](./an-introduction-to-pymc3/)
**Adrian Seyboldt**

PyMC3 allows you to build statistical models for a wide range of datasets, use those models to estimate underlying parameters, and compute the uncertainty about those parameters. In this talk I will try to give a gentle introduction to PyMC3, and help avoid common pitfalls for new users.


# [And now to something ELSE: Real Time Data Processing @ billiger.de](./and-now-to-something-else-real-time-data-processing-billiger-de/)
**Axel Arnold**

billiger.de is one of the largest price comparison websites in Germany. In this talk, we want to share how we built the scalable, event-driven processing system which renders the products for our website using Python, Elasticsearch and redis.


# [Automated testing with 400TB memory](./automated-testing-with-400tb-memory/)
**Christoph Heer**

SAP operates a dedicated test infrastructure with more than 400TB main memory for its in-memory database SAP HANA. All custom implementations like improved scheduling, caching of artifacts and monitoring were implemented in our favorite programming language Python.


# [Build text classification models ( CBOW and Skip-gram) with FastText in python](./build-text-classification-models-cbow-and-skip-gram-with-fasttext-in-python/)
**Kajal Puri**

NLP is an exciting way to interpret the textual data especially when we know that computer neither speak nor understand any kind of human language. So, how do we represent each word of a language in such a unique numerical pattern and process it in quickest way possible. Answer is FastText library.


# [Building your own SDN with Debian Linux, Salt Stack and Python](./building-your-own-sdn-with-debian-linux-salt-stack-and-python/)
**Maximilian Wilhelm**

In this talk you will get an overview about some awesome features of comtemporary Linux networking, how to easily integrate them with some cool open source tools, and glueing all this together with Salt Stack and some Python to get your very own SDN controller for a service-provider style network.


# [Connecting PyData to other Big Data Landscapes using Arrow and Parquet](./connecting-pydata-to-other-big-data-landscapes-using-arrow-and-parquet/)
**Uwe L. Korn**

While Python itself hosts a wide range of machine learning and data tools, other ecosystems like the Hadoop world also provide beneficial tools that can be either connected via Apache Parquet files or in memory using Arrow. This talks shows recent developments that allow interoperation at speed.


# [Convolutional Methods for Text](./convolutional-methods-for-text/)
**Tal Perry**

Everyone knows the adage "Good, fast, cheap: Choose two". In this talk I'll show that with convolutions we don't have to make uncomfortable choices like that. Using convolutional neural networks we can get the same results 10x faster and with a fraction of the data. 


# [Convolutional Neural Networks for Image Moderation & Visual Similarity](./convolutional-neural-networks-for-image-moderation-visual-similarity/)
**Alex Conway**

This talk is a crash course on convolutional neural networks and how to use them to solve 2 real-world applications at scale. The first is an image moderation system and the second is a visual similarity system where a user uploads an image of an item and the system returns visually similar items.


# [Data Science Best Practices : From Proof of Concepts to Production](./data-science-best-practices-from-proof-of-concepts-to-production/)
**Yasir Khan**

This presentation will benefit the audience as it brings forward the practical issues in the industry today as we move towards industrializing data science algorithms. We will discuss the best practices around organization, methodology and tools to integrate a data science project into production.


# [Data Science Project for Beginners](./data-science-project-for-beginners/)
**Natalie Speiser & Jens Beyer**

AI and Machine Learning are taking over the world - but how do you actually start with understanding your data and predicting events? And what kind of "political" trouble could you run into? With examples from real projects, we try to give you a feeling for data science projects.


# [Demystifying Deep Learning Frameworks : Generic Function Approximation using Tensorflow](./demystifying-deep-learning-frameworks-generic-function-approximation-using-tensorflow/)
**Siddhartha Rai**

This talk attempts to demystify some aspects of Deep Learning using Tensorflow, a popular deep learning framework. Under the hood, Tensorflow is essentially a way to approximate functions. We show how Tensorflow can be used as a generic function approximation tool, and some approaches to tune it. 


# [Empowered by Python - A success story](./empowered-by-python-a-success-story/)
**Jens Nie**

Introducing a new programming language in a company is always a daring task, usually involving a lot of effort and the will for change.

We'd like to take you on a journey reflecting eight years of challenges, solutions and success ending in a best practice guide helping you to achieve the same.


# [Flow is in the Air: Best Practices of Building Analytical Data Pipelines with Apache Airflow](./flow-is-in-the-air-best-practices-of-building-analytical-data-pipelines-with-apache-airflow/)
**Dominik Benz**

Apache Airflow is an Open-Source python project which facilitates an intuitive programmatic definition of analytical data pipelines. Based on 2+ years of productive experience, we summarize its core concepts, detail on lessons learned and set it in context with the Big Data Analytics Ecosystem.


# [From Java to Python: Migrating Search Functionality at billiger.de](./from-java-to-python-migrating-search-functionality-at-billiger-de/)
**Patrick Schemitz**

billiger.de is a German price comparison site. Search is handled by a heavily customized Solr setup. When switching to SolrCloud earlier this year, instead of porting our custom SolrComponents to SolrCloud, we ended up re-implementing them in a Python service layer. Here we show how, and why.


# [Getting Scikit-Learn To Run On Top Of Pandas](./getting-scikit-learn-to-run-on-top-of-pandas/)
**Ami Tavory**

Scikit-Learn is built directly over numpy, Python's numerical array library. Pandas adds to numpy metadata and higher-level munging capabilities. This talk describes how to intelligently auto-wrap Scikit-Learn for creating a version that can leverage pandas's added features.


# [Graphql in the Python World](./graphql-in-the-python-world/)
**Nafiul Islam**

So you've heard about this new thing called Graphql. What is it all about? What problems does it solve, and most importantly, how can you leverage it the python ecosystem? This talk is a tell all on what what Graphql is and how you can start using it with Python.


# [Hacking the Python AST](./hacking-the-python-ast/)
**Suhas SG**

Computer languages are a remarkable feat of human scientific engineering. In this talk, we'll look at the innards of CPython, and specifically learn how to modify and hack Abstract Syntax Trees (for world peace, of course).



# [How efficient is your public transport network? A data-driven approach using Geopandas and GTFS](./how-efficient-is-your-public-transport-network-a-data-driven-approach-using-geopandas-and-gtfs/)
**Pieter Mulder**

The presentation will explain how GeoPandas and other tools are used to analyse GTFS files to calculate the reachability of a public transport system.


# [If Microservices weren't the answer then Design Patterns have the solution.](./if-microservices-weren-t-the-answer-then-design-patterns-have-the-solution/)
**Ent**

Microservices are the trend now. However, they are not always the right solution and in hindsight, some services should be merged/combined. What's the proper approach? Design Patterns have you covered! I feel this is quite a common problem we face and this talk will be insightful on how to solve it.


# [Integrating Jupyter Notebooks into your Infrastructure](./integrating-jupyter-notebooks-into-your-infrastructure/)
**Florian Rhiem**

Jupyter Notebooks combine executable code and rich text elements in a web application. In this talk you will learn how a custom JupyterHub installation can be used to integrate Jupyter Notebooks into your infrastructure, including existing authentication methods and custom software distributions.


# [Keeping the grip on decoupled code using CLIs](./keeping-the-grip-on-decoupled-code-using-clis/)
**Anne Matthies**

So you’ve decoupled your code monolith into all those micro chunks. When someone asks „How can I…“ you want to answer: „That’s easy! We’ve built that.“ Actually, you’ve built all parts needed for that. Who plugs them together? And how?


# [Large-scale machine learning pipelines using Luigi, PySpark and scikit-learn](./large-scale-machine-learning-pipelines-using-luigi-pyspark-and-scikit-learn/)
**Alexander Bauer**

For prescriptive analytics applications, data science teams need to design, build and maintain complex machine learning pipelines. In this talk, we demonstrate how such pipelines can be implemented in a robust, scalable and extensible manner using Python, Luigi, PySpark and scikit-learn.


# [Lift your Speed Limits with Cython](./lift-your-speed-limits-with-cython/)
**Stefan Behnel**

Think you can benefit from making your Python application run faster? Then come along and learn how to tune your code with Cython.


# [Migrating existing codebases to using type annotations](./migrating-existing-codebases-to-using-type-annotations/)
**Stephan Jaensch**

You have an existing codebase of tens or hundreds of thousands of lines of Python code? Learn how to get started with type annotations! Get your teammates (and yourself!) to always annotate your code. Find out what unexpected issues you might run into and how to solve them, all with this talk.


# [Modern ETL-ing with Python and Airflow (and Spark)](./modern-etl-ing-with-python-and-airflow-and-spark/)
**Tamara Mendt**

The challenge of data integration is real. The sheer amount of tools that exist to address this problem is proof that organizations struggle with it. This talk will discuss the inherent challenges of data integration, and show how it can be tackled using Python and Apache Airflow and Apache Spark.


# [No Compromise: Use Ansible properly or stick to your scripts](./no-compromise-use-ansible-properly-or-stick-to-your-scripts/)
**Bjoern Meier**

What you do in Ansible should be clean an simple. What we did was not.
So I will show what we did wrong but also what we have changed or still have to, to make our life easier again. But I will also show how we progressively utilize Ansible to deploy our Data Science infrastructure.


# [Out-of-core Analytics Using Python](./out-of-core-analytics-using-python/)
**Gopi Suvanam**

Most analytics packages in Python store data and perform analysis/modeling in the memory. This puts a limitation on the use of packages for data that does not fit in memory. We propose an architecture using column-stores on the disc and of out-of-core processing in Python to circumvent this problem.


# [Platform intrusion detection with deep learning](./platform-intrusion-detection-with-deep-learning/)
**Carsten Pohl**

shop.rewe.de is not only visited by human customers, but also by machines. We have built a deep learning platform using python with Keras, Tensorflow, on the Google infrastructure. In this talk we would like to show you how python is used in practice, supporting 2,5 million visitors each day.


# [Plugin ecosystems for Python web-applications](./plugin-ecosystems-for-python-web-applications/)
**Raphael Michel**

The power of some popular web applications like WordPress comes from a flexible plugin system. This talk will show how to implement such plugin architectures for Python web applications including real-world examples. I'll give examples with Django, but the important bits aren't Django-specific.


# [Programming the Web of Things with Python and MicroPython](./programming-the-web-of-things-with-python-and-micropython/)
**Hardy Erlinger**

In this session you will get a gentle introduction to the ever-expanding world of small programmable devices: learn to use single board computers and  microcontrollers to connect to sensors and talk to APIs - all using Python or MicroPython, a subset of Python 3 for use in constrained environments.


# [Project Avatar - Telepresence robotics with Nao and Kinect](./project-avatar-telepresence-robotics-with-nao-and-kinect/)
**Thomas Reifenberger**

Using humanoid robots, VR glasses and 3D cameras you can experience the world through the eyes of a robot and control it via gestures. We built a telepresence robotics system based on a Nao robot, an Oculus Rift and a Kinect One to realize an immersive "out-of-body experience" as in  "Avatar".


# [PyGenSA: An Efficient Global Optimization for Generalized Simulated Annealing](./pygensa-an-efficient-global-optimization-for-generalized-simulated-annealing/)
**Stephane Cano**

The PyGenSA python module has been developed for generalized simulated annealing to process complicated non-linear objective functions with a large number of local minima.


# [Python in Space - The N Body Problem](./python-in-space-the-n-body-problem/)
**Daniel Jilg**

The N Body Problem is a computationally complex problem that we use to predict how planets and galaxies – and everything in between – move through space. I'll show you some interesting ways to calculate it, and we'll have a look at what to do, should you find yourself in a space ship's pilot seat.


# [Rasa: open source conversational AI to build next generation chatbots](./rasa-open-source-conversational-ai-to-build-next-generation-chatbots/)
**Joey Faulkner**

Soon you will primarily communicate with your computer through conversation. At Rasa, we believe that this revolution in user experience should be available to everyone. In this spirit we have developed open source tools that use machine learning to make chatbots in a developer-friendly interface.


# [Really Deep Neural Networks with PyTorch](./really-deep-neural-networks-with-pytorch/)
**David Dao**

Modern neural networks have hundreds of layers! How can we train such deep networks? Simply stacking layers on top doesn't work! This talk introduces the deep learning library PyTorch by explaining the exciting math, cool ideas and simple code behind what makes really deep neural networks work.


# [Simple Data Engineering in python 3.5+ with Bonobo](./simple-data-engineering-in-python-3-5-with-bonobo/)
**Romain Dorgueil**

Simple is better than complex, and that's True for data pipelines, too.

Bonobo is a python 3.5+ tool used to write and monitor data pipelines.
It’s plain, simple, modern, and atomic python.

This talk is a practical encounter, from zero to a complete data pipeline.

Spoiler : no «big data» here.



# [Sport analysis with Python](./sport-analysis-with-python/)
**Thuy Le**

Sport analysis with Python and visualize data with tableau.
We have sample data of a team in football match (name of players, positions of players, velocities of players) which are recorded in every 20 millisecond. We use python to analysis and Tableau to visualize  the activities of each player


# [Synthetic Data for Machine Learning Applications](./synthetic-data-for-machine-learning-applications/)
**Dr. Hendrik Niemeyer**

In this talk I will show how we use real and synthetic data to create successful models for risk assessing pipeline anomalies. The main focus is the estimation of the difference in the statistical properties of real and generated data by machine learning methods.


# [Technical Lessons Learned from Pythonic Refactoring](./technical-lessons-learned-from-pythonic-refactoring/)
**Yenny Cheung**

Ever stumbled upon poorly-maintained codebases that suck away your productivity? Fear no more! This talk addresses how to identify code smell (from Brie to Bleu cheese) and go through examples to refactor code and APIs. You will learn the art of writing clean, maintainable and idiomatic Python code.


# [The Mustache Movement](./the-mustache-movement/)
**Heidi Thorpe**

Generative Adversarial Networks (GANs) are a class of neural networks which  are powerful and flexible tools.
A common application is image generation.
I would like to give a simple introduction to GANs using existing python modules and an example of how "mustache-ness" can be learned and applied.



# [The Snake in the Tar Pit: Complex Systems with Python](./the-snake-in-the-tar-pit-complex-systems-with-python/)
**Stephan Erb**

The Zen of Python motivates us to build software that is easy to maintain and extend. In reality however, we often end up with systems that are quite the opposite: complex and hard to change. In this talk, we will have a look at why this happens and how we can try to prevent it.


# [The eye of the Python, an eye tracking system. From zero to... what eye learned.](./the-eye-of-the-python-an-eye-tracking-system-from-zero-to-what-eye-learned/)
**Samuel Muñoz Hidalgo | BEEVA**

Is it possible to predict the point in the screen where a person is looking at? Easy to say but hard to do.
An eye tracking system is the perfect project to learn the difficulties of applied machine learning. From gathering training data to building the final software with an acceptable performance.


# [Theoretical physics with sympy](./theoretical-physics-with-sympy/)
**Florian Thöle**

In this talk, I will introduce the basics of sympy. Using a simple model system in magnetism, we'll play around with simplifications, then do a bit of numerical optimization and in the end make psychedelic-looking figures.



# [Time series feature extraction with tsfresh - “get rich or die overfitting”](./time-series-feature-extraction-with-tsfresh-get-rich-or-die-overfitting/)
**Nils Braun**

Have you ever thought about developing a time series model to predict stock prices?
Or do you consider log time series from the operation of cloud resources as being more compelling?
In this case you really should consider using the time series feature extraction package tsfresh for your project.


# [Turbodbc: Turbocharged database access for data scientists](./turbodbc-turbocharged-database-access-for-data-scientists/)
**Michael König**

Python's database API 2.0 is well suited for transactional database workflows, but not so much for column-heavy data science. This talk explains how the ODBC-based turbodbc database module extends this API with first-class, efficient support for familiar NumPy and Apache Arrow data structures.


# [Veripeditus - The Free AR Game Framework for Everyone](./veripeditus-the-free-ar-game-framework-for-everyone/)
**Dominik George**

Augmented Reality has taken off quite a bit as a game style in 2016, but creating such games with open tools used to be very difficult. Veripeditus is a free and open framework that brings AR game development to all experience levels, including the class room, based on nothing but plain Python.


# [Vim your Python, Python your Vim](./vim-your-python-python-your-vim/)
**Miroslav Šedivý**

What do you use to write source code, docs, books or e-mails? Single brain, single pair of hands, single keyboard, but a different keyboard layout for each language and a different text editor for each purpose? 


# [Why Python Has Taken Over Finance](./why-python-has-taken-over-finance/)
**Yves Hilpisch**

Not too long ago, the finance field was dominated by compiled languages, such as C or C++, since they were considered to be the right choice for the implementation of computationally demanding algorithms. This talk explains why Python has become No 1 in the field.

